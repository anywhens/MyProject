import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

BOT_TOKEN = "–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞"   # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_ID = int("–≤–∞—à_telegram_id")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID
waiting_for_message = set()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    create_needed_files_and_folders()
    keyboard = [
        [InlineKeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", callback_data="send_message")],
        [InlineKeyboardButton("üîß –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã", callback_data="common_issues")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
    )

async def show_common_issues(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("üíª –ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä", callback_data="issue_1")],
        [InlineKeyboardButton("üåê –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", callback_data="issue_2")],
        [InlineKeyboardButton("üñ® –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç", callback_data="issue_3")],
        [InlineKeyboardButton("üîä –ù–µ—Ç –∑–≤—É–∫–∞ –Ω–∞ –ü–ö", callback_data="issue_4")],
        [InlineKeyboardButton("‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="issue_5")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=reply_markup)

async def issue_solution(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    solutions = {
        "issue_1": "üîå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–±–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑—ä–µ–º.",
        "issue_2": "üì∂ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏.",
        "issue_3": "üñ® –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∏, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä.",
        "issue_4": "üîâ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∏ –¥—Ä–∞–π–≤–µ—Ä—ã –∑–≤—É–∫–æ–≤–æ–π –∫–∞—Ä—Ç—ã.",
        "issue_5": "‚å®Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö."
    }
    await query.message.edit_text(solutions.get(query.data, "–û—à–∏–±–∫–∞: –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.data == "send_message":
        user_id = query.message.chat.id
        waiting_for_message.add(user_id)
        await query.answer()
        await query.message.edit_text("‚úç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    elif query.data == "common_issues":
        await show_common_issues(update, context)
    elif query.data.startswith("issue_"):
        await issue_solution(update, context)

async def forward_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat.id
    if user_id not in waiting_for_message:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'.")
        return
    waiting_for_message.remove(user_id)
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üì¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.message.chat.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: {user_id}):\n{update.message.text}"
    )
    await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

async def reply_to_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.id != ADMIN_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    try:
        if len(context.args) < 2:
            await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")
            return
        user_id = int(context.args[0])
        reply_text = " ".join(context.args[1:])
        await context.bot.send_message(chat_id=user_id, text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {reply_text}")
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É* ‚ÑπÔ∏è\n"
        "üì© *–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:*\n"
        "- –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'.\n"
        "- –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ.\n"
        "üîß *–ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:*\n"
        "- –ù–∞–∂–º–∏—Ç–µ 'üîß –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø—Ä–æ–±–ª–µ–º—É."
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("reply", reply_to_user_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, forward_to_admin))
    application.run_polling()

if __name__ == "__main__":
    main()
